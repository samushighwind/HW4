import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

/* Converter.java
 * Converts the output from the psuedoboolean solver into the same output generated by the webtree output.
 */
public class Converter {

	final static String INPUT_FILE = "spring-2015.csv";
	
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		String output = "";
		Scanner sc = new Scanner(new File("spring-2015-solution-b.txt"));
		while(sc.hasNext()){
			output += sc.next() + " ";
		}
		
		//System.exit(0);
		String[] outputs= output.split(" ");
		Scanner scan = new Scanner(new File(INPUT_FILE));
		scan.nextLine();//skip the header line;
		List<Request> requests = new LinkedList<Request>();
		int i = 1;
		int numStudents = 0;
		while(scan.hasNext()){
			String[] line = scan.next().split(",");
			int id = Integer.parseInt(line[0]);
			int crn = Integer.parseInt(line[2]);
			int tree = Integer.parseInt(line[3]);
			int branch = Integer.parseInt(line[4]);
			int ceil = Integer.parseInt(line[5]);
			String subject = line[8];
			int numb = Integer.parseInt(line[9].substring(0, 3)); //removes the "S" that sometimes appears.
			char seq = line[10].charAt(0);		
			
			requests.add(new Request(i, id, crn, tree, branch, ceil, numb, seq, subject));
			i++;
			
			if(id>numStudents) numStudents = id;
		}
		scan.close();
		
		Set<Request> trueRequests = new HashSet<Request>();
		for(String s : outputs){
			s = s.trim(); //remove trailing whitespace
			//System.out.println(s); //debugging
			if(!(s.charAt(0)==('-'))){
				//Now, find that request in the list of requests
				String num = s.substring(1, s.length());
				Request req = findRequest(requests, Integer.parseInt(num));
				trueRequests.add(req); //add it to a set of all true requests
			}
		}
		int counter = 0;
		
		List<String> webtreeForm = new LinkedList<String>();
		
		//Go through student by student and show the four (or less) classes.
		for(int student = 1; student<=numStudents; student ++){
			String curr = Integer.toString(student) + " ";
			for(Request trueRequest : trueRequests){
				if(trueRequest.getId()==student){
					curr += trueRequest.getCrn() + " ";
					counter++;
				}
			}
			System.out.println(curr.trim()); //trim the trailing whitespace.
			webtreeForm.add(curr.trim());
		}
		//System.out.println(trueRequests.size());
		//System.out.println(counter);
		
		List<String> webList = new LinkedList<String>();
		Scanner scan2 = new Scanner(new File("webtree.txt"));
		while(scan2.hasNext()) {
			webList.add(scan2.nextLine().trim());
		}
		
		System.out.println();
		int totalScore = 0;
		for(String sched:webtreeForm) {
			totalScore += score(sched, requests);
		}
		System.out.println("The total score is " + totalScore);
		System.out.println("The average score for granted requests is " + double(totalScore) / trueRequests.size());
		System.out.println("The average number of courses per student is " + avgCrn(webtreeForm));
		int[] t = totals(webtreeForm);
		for(int k = 0; k < 5; k++) {
			System.out.println("The number of students with " + k + " courses is " + t[k] + ".");
		}
		System.out.println();
		totalScore = 0;
		for(String sched:webList) {
			totalScore += score(sched, requests);
		}
		System.out.println("The total score for Old School Webtree is " + totalScore);
		System.out.println("The average number of courses per student is " + avgCrn(webList));
		t = totals(webList);
		for(int k = 0; k < 5; k++) {
			System.out.println("The number of students with " + k + " courses is " + t[k] + ".");
		}
		
	}
	
	private static Request findRequest(List<Request> l, int requestNumber){
		for(Request r : l){
			if(r.getVarNum()==requestNumber) return r;
		}
		System.out.println("error, program crashed.");
		System.exit(0);
		return null;
	}
	
    private static int rank(Request req) {
        int r;
        if(req.getBranch() == 1) {
            r = req.getTree();
        } else if(req.getTree() != 4) {
            r = req.getBranch() % 2 + 1;
        } else r = req.getBranch() + 3;
        return - (8 - r);
    }
	
	private static int rank(int id, int crn, List<Request> requests) {
		for(Request i:requests) {
			if(i.getId() == id && i.getCrn() == crn) {
				return rank(i);
			}
		}
		return 0;
	}
	
	//Input string: "ID CRN CRN CRN CRN"
	private static int score(String sched, List<Request> requests) {
		int score = 0;
		String[] courses = sched.split(" ");
		int id = Integer.parseInt(courses[0]);
		for(int i = 1; i < courses.length; i++) {
			score += rank(id, Integer.parseInt(courses[i]), requests);
		}
		return score;
	}
	
	private static double avgCrn(List<String> scheds) {
		double avg = 0.0;
		for(String sched:scheds) {
			avg += sched.split(" ").length - 1;
		}
		avg /= scheds.size();
		return avg;
	}
	
	//Returns int array of length 5: #Students w/ 0 courses, # w/1 course, etc., to 4.
	private static int[] totals(List<String> scheds) {
		int[] t = new int[5];
		for(String sched:scheds) {
			t[sched.split(" ").length - 1]++;
		}
		return t;
	}
}
